/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vtngestor;

import cjb.ci.CtrlInterfaz;
import cjb.ci.Mensaje;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Arrays;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import proyectosp.Manipulacion;
import proyectosp.Alumnos;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Cassandra
 */
public class VtnConsultaAlum extends javax.swing.JFrame
{

    DefaultTableModel dtm;

    /**
     * Creates new form VtnConsultaAlu
     */
    public VtnConsultaAlum()
    {
        initComponents();
        String com[] =
        {
            //"Clave", "Nombre", "Primer Apellido", "Segundo Apellido", "Sexo", "Desnutricion", "Sobrepeso", "Alergias", "Diabetes", "Otros", "Vive Con", "Carrera"
        };
        dtm = new DefaultTableModel(com, 0);
        desp.setModel(dtm);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        desp = new javax.swing.JTable();
        elimina = new javax.swing.JButton();
        ordena = new javax.swing.JButton();
        pdf = new javax.swing.JButton();
        hym = new javax.swing.JButton();
        enfermedades = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta de Alumnos");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setEnabled(false);

        desp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String []
            {
                "Cve", "Nombre", "Primer apellido", "Segundo apellido", "Sexo", "Desnutricion", "Sobrepeso", "Alergias", "Diabetes", "Obecidad", "Otros", "Vive con", "Carrera"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        desp.setEnabled(false);
        jScrollPane2.setViewportView(desp);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 1180, 480));

        elimina.setBackground(new java.awt.Color(255, 51, 51));
        elimina.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        elimina.setText("Elimina");
        elimina.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                eliminaActionPerformed(evt);
            }
        });
        jPanel1.add(elimina, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 120, 30));

        ordena.setBackground(new java.awt.Color(153, 153, 255));
        ordena.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ordena.setText("Ordena");
        ordena.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ordenaActionPerformed(evt);
            }
        });
        jPanel1.add(ordena, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 120, 30));

        pdf.setBackground(new java.awt.Color(153, 255, 153));
        pdf.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pdf.setText("PDF");
        pdf.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                pdfActionPerformed(evt);
            }
        });
        jPanel1.add(pdf, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 120, 30));

        hym.setBackground(new java.awt.Color(51, 255, 153));
        hym.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        hym.setText("Estadisticas H/M");
        hym.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                hymActionPerformed(evt);
            }
        });
        jPanel1.add(hym, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 10, 160, 40));

        enfermedades.setBackground(new java.awt.Color(0, 255, 153));
        enfermedades.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        enfermedades.setText("Estadisticas Enfermedades");
        enfermedades.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                enfermedadesActionPerformed(evt);
            }
        });
        jPanel1.add(enfermedades, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 70, 160, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vtngestor/imagenes/cve222.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -30, 1180, 610));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        DefaultTableModel model = (DefaultTableModel) desp.getModel();
        model.setColumnIdentifiers(new Object[]
        {
            "Clave", "Nombre", "Primer Apellido", "Segundo Apellido", "Sexo", "Desnutricion", "Sobrepeso", "Alergias", "Obecidad", "Diabetes", "Otros", "Vive Con", "Carrera"
        });

        JTableHeader header = desp.getTableHeader();
        header.setReorderingAllowed(false);

        JTableHeader header1 = desp.getTableHeader();
        header.setResizingAllowed(false);
        try
        {
            mostrar();
        } catch (Exception e)
        {
            Mensaje.error(this, "No hay datos queÂ mostrar");
        }
    }//GEN-LAST:event_formWindowOpened

    private void eliminaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_eliminaActionPerformed
    {//GEN-HEADEREND:event_eliminaActionPerformed
        String cveElimina = JOptionPane.showInputDialog("Ingrese la clave del Alumno:");
        try
        {
            if (Manipulacion.buscarcve(VtnInicio.d, cveElimina) != -1 && VtnInicio.d[Manipulacion.buscarcve(VtnInicio.d, cveElimina)] instanceof Alumnos)
            {
                VtnInicio.d = Manipulacion.elimina(VtnInicio.d, Manipulacion.buscarcve(VtnInicio.d, cveElimina));
                Mensaje.exito(this, "Alumno dado de baja correctamente");
                actualizarTabla();
            } else
            {
                if (cveElimina == null)
                {
                    Mensaje.error(this, "Ingrese CVE");
                    CtrlInterfaz.limpia(cveElimina);
                    CtrlInterfaz.cambia(cveElimina);
                } else
                {
                    Mensaje.error(this, "Ingrese un CVE valido");
                    CtrlInterfaz.limpia(cveElimina);
                    CtrlInterfaz.cambia(cveElimina);
                }
            }
        } catch (Exception e)
        {
            Mensaje.error(this, "No se a encontrado el CVE ingresado");
        }
    }//GEN-LAST:event_eliminaActionPerformed

    private void ordenaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ordenaActionPerformed
    {//GEN-HEADEREND:event_ordenaActionPerformed
        Alumnos[] arregloAlumnos = obtenerArregloAlumnos();

        Arrays.sort(arregloAlumnos, (a1, a2) -> a1.getNom().compareTo(a2.getNom()));

        dtm.setRowCount(0);
        for (Alumnos alumno : arregloAlumnos)
        {
            Object[] rowData = obtenerDatosAlumno(alumno);
            dtm.addRow(rowData);
        }
    }//GEN-LAST:event_ordenaActionPerformed

    private void pdfActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pdfActionPerformed
    {//GEN-HEADEREND:event_pdfActionPerformed
        generarpdf();
    }//GEN-LAST:event_pdfActionPerformed

    private void hymActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_hymActionPerformed
    {//GEN-HEADEREND:event_hymActionPerformed
        mostrarGraficoPastel();
    }//GEN-LAST:event_hymActionPerformed

    private void enfermedadesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_enfermedadesActionPerformed
    {//GEN-HEADEREND:event_enfermedadesActionPerformed
        int volumen = 600;
        mostrarGraficoBarrasEnfermedades(volumen);
    }//GEN-LAST:event_enfermedadesActionPerformed
    public void generarpdf()
    {
        try
        {
            PDDocument documento = new PDDocument();
            //PDPage pagina = new PDPage(PDRectangle.A4);
            PDPage pagina = new PDPage(new PDRectangle(PDRectangle.A4.getHeight(), PDRectangle.A4.getWidth()));
            documento.addPage(pagina);
            PDPageContentStream contenido = new PDPageContentStream(documento, pagina);

            contenido.beginText();
            contenido.setFont(PDType1Font.TIMES_BOLD, 7);
            contenido.newLineAtOffset(20, pagina.getMediaBox().getHeight() - 52);
            //contenido.showText("Hola mundo");
            contenido.endText();

            //escribirTablaEnPDF(documento, pagina, contenido);
            escribirInformacionEnPDF(documento, pagina, contenido);

            contenido.close();

            documento.save("C:\\Users\\chemo\\Documents\\Proyecto Gestor Clinicp\\PDF_Tabla\\Pdf_GestorClinico.pdf");

            documento.close();

        } catch (Exception e)
        {
            Mensaje.error(this, "No se pudo generar el PDF");
        }
    }

    private void mostrarGraficoBarrasEnfermedades(int anchoGrafica)
    {
        CategoryDataset dataset = createEnfermedadesDataset();

        JFreeChart chart = ChartFactory.createBarChart(
                "GrÃ¡fica de Barras - Enfermedades",
                "Enfermedades",
                "Cantidad de Alumnos",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        CategoryPlot plot = chart.getCategoryPlot();
        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
        yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(anchoGrafica, 400));

        JFrame frame = new JFrame("GrÃ¡fica de Barras - Enfermedades");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(chartPanel, BorderLayout.CENTER);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private CategoryDataset createEnfermedadesDataset()
    {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        int cantidadDesnutricion = Manipulacion.AlumDesnutricion(VtnInicio.d);
        int cantidadSobrepeso = Manipulacion.AlumSobrepeso(VtnInicio.d);
        int cantidadAlergias = Manipulacion.AlumAlergias(VtnInicio.d);
        int cantidadObesidad = Manipulacion.AlumObecidad(VtnInicio.d);
        int cantidadDiabetes = Manipulacion.AlumDiabetes(VtnInicio.d);

        dataset.addValue(cantidadDesnutricion, "Enfermedades", "Desnutricion");
        dataset.addValue(cantidadSobrepeso, "Enfermedades", "Sobrepeso");
        dataset.addValue(cantidadAlergias, "Enfermedades", "Alergias");
        dataset.addValue(cantidadObesidad, "Enfermedades", "Obesidad");
        dataset.addValue(cantidadDiabetes, "Enfermedades", "Diabetes");

        return dataset;
    }

    private void mostrarGraficoPastel()
    {
        DefaultPieDataset dataset = new DefaultPieDataset();

        double porcentajeHombres = Manipulacion.calcularPorcentajeHombres(VtnInicio.d);
        double porcentajeMujeres = Manipulacion.calcularPorcentajeMujeres(VtnInicio.d);

        String labelHombres = "Hombres "; //+ formatearDecimal(porcentajeHombres, 1);
        String labelMujeres = "Mujeres "; //+ formatearDecimal(porcentajeMujeres, 1);

        dataset.setValue(labelHombres, porcentajeHombres);
        dataset.setValue(labelMujeres, porcentajeMujeres);

        JFreeChart chart = ChartFactory.createPieChart(
                "Porcentaje de Hombres y Mujeres",
                dataset,
                true,
                true,
                false);

        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(560, 370));

        JFrame frame = new JFrame("GrÃ¡fico de Pastel");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(chartPanel);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    public static String formatearDecimal(double valor, int cantidadDecimales)
    {
        String formato = "#.";
        for (int i = 0; i < cantidadDecimales; i++)
        {
            formato += "#";
        }
        DecimalFormat df = new DecimalFormat(formato);
        return df.format(valor);
    }

    private void escribirInformacionEnPDF(PDDocument documento, PDPage pagina, PDPageContentStream contenido) throws IOException
    {
        String[] columnas =
        {
            "Cve", "Nombre", "Pri Ap.", "Seg Ap.", "Sexo", "DesnutriciÃ³n", "Sobrepeso",
            "Alergias", "Obesidad", "Diabetes", "Otras", "Vive Con", "Carrera"
        };

        float yStart = pagina.getMediaBox().getHeight() - 50;
        float yPosition = yStart;
        float rowHeight = 15f;
        float cellMargin = 5f;
        float margin = 20f;

        PDPageContentStream tableContent = new PDPageContentStream(documento, pagina, PDPageContentStream.AppendMode.APPEND, true);
        tableContent.setFont(PDType1Font.HELVETICA_BOLD, 8);

        float yTextPos = yStart - 15;
        float xTextPos = margin + cellMargin;

        for (int i = 0; i < columnas.length; i++)
        {
            tableContent.beginText();
            tableContent.newLineAtOffset(xTextPos, yTextPos);
            tableContent.showText(columnas[i]);
            tableContent.endText();
            xTextPos += 70;  // Establece el ancho de la celda segÃºn tus necesidades
        }

        for (int i = 0; i < dtm.getRowCount(); i++)
        {
            yTextPos -= rowHeight;
            xTextPos = margin + cellMargin;

            for (int j = 0; j < dtm.getColumnCount(); j++)
            {
                tableContent.beginText();
                tableContent.newLineAtOffset(xTextPos, yTextPos);
                tableContent.showText(dtm.getValueAt(i, j).toString());
                tableContent.endText();
                xTextPos += 70;  // Establece el ancho de la celda segÃºn tus necesidades
            }
        }

        tableContent.close();
        Mensaje.exito(this, "PDF Generado con Ã©xito");
    }

//private void escribirTablaEnPDF(PDDocument documento, PDPage pagina, PDPageContentStream contenido) throws IOException
//    {
//        String[] columnas =
//        {
//            "Cve", "Nombre", "Pri Ap.", "Seg Ap.", "Sexo", "DesnutriciÃ³n", "Sobrepeso",
//            "Alergias", "Obesidad", "Diabetes", "Otras", "Vive Con", "Carrera"
//        };
//
//        float[] columnWidths =
//        {
//            30, 40, 40, 35, 30, 40, 40, 40, 40, 40, 65, 60, 60
//        };
//
//        float yStart = pagina.getMediaBox().getHeight() - 50;
//        float tableWidth = pagina.getMediaBox().getWidth() - 40;
//
//        float yPosition = yStart;
//        int rows = 1;
//        int cols = columnas.length;
//        float rowHeight = 15f;
//        float tableHeight = rowHeight * rows;
//        float cellMargin = 5f;
//        float margin = 20f;
//
//        PDPageContentStream tableContent = new PDPageContentStream(documento, pagina,PDPageContentStream.AppendMode.APPEND, true);
//        tableContent.setFont(PDType1Font.HELVETICA_BOLD, 5);
//
//        float yBottom = yPosition - tableHeight - 20f;
//        float tableTopY = yPosition;
//        float xPosition = margin;
//
//        for (int i = 0; i <= cols; i++)
//        {
//            tableContent.moveTo(xPosition + i * tableWidth / cols, yPosition);
//            tableContent.lineTo(xPosition + i * tableWidth / cols, yBottom);
//        }
//
//        for (int i = 0; i <= rows; i++)
//        {
//            tableContent.moveTo(xPosition, yPosition - i * rowHeight);
//            tableContent.lineTo(xPosition + tableWidth, yPosition - i * rowHeight);
//        }
//
//        tableContent.stroke();
//
//        float yTextPos = tableTopY - 15;
//        float xTextPos = xPosition + cellMargin;
//        for (int i = 0; i < columnas.length; i++)
//        {
//            tableContent.beginText();
//            tableContent.newLineAtOffset(xTextPos, yTextPos);
//            tableContent.showText(columnas[i]);
//            tableContent.endText();
//            xTextPos += columnWidths[i];
//        }
//
//        for (int i = 0; i < dtm.getRowCount(); i++)
//        {
//            yTextPos -= rowHeight;
//            xTextPos = xPosition + cellMargin;
//
//            for (int j = 0; j < dtm.getColumnCount(); j++)
//            {
//                tableContent.beginText();
//                tableContent.newLineAtOffset(xTextPos, yTextPos);
//                tableContent.showText(dtm.getValueAt(i, j).toString());
//                tableContent.endText();
//                xTextPos += columnWidths[j];
//            }
//        }
//
//        tableContent.close();
//        Mensaje.exito(this, "PDF Generado con exito");
//    }
//    private void escribirTablaEnPDF(PDDocument documento, PDPage pagina, PDPageContentStream contenido) throws IOException
//    {
//        String[] columnas =
//        {
//            "Cve", "Nombre", "Pri Ap.", "Seg Ap.", "Sexo", "DesnutriciÃ³n", "Sobrepeso",
//            "Alergias", "Obesidad", "Diabetes", "Otras", "Vive Con", "Carrera"
//        };
//
//        float[] columnWidths =
//        {
//            30, 40, 40, 35, 30, 40, 40, 40, 40, 40, 65, 60, 60
//        };
//
//        float yStart = pagina.getMediaBox().getHeight() - 50;
//        float tableWidth = pagina.getMediaBox().getWidth() - 40;
//
//        float yPosition = yStart;
//        int rows = 1;
//        int cols = columnas.length;
//        float rowHeight = 15f;
//        float tableHeight = rowHeight * rows;
//        float cellMargin = 5f;
//        float margin = 20f;
//
//        PDPageContentStream tableContent = new PDPageContentStream(documento, pagina,PDPageContentStream.AppendMode.APPEND, true);
//        tableContent.setFont(PDType1Font.HELVETICA_BOLD, 5);
//
//        float yBottom = yPosition - tableHeight - 20f;
//        float tableTopY = yPosition;
//        float xPosition = margin;
//
//        for (int i = 0; i <= cols; i++)
//        {
//            tableContent.moveTo(xPosition + i * tableWidth / cols, yPosition);
//            tableContent.lineTo(xPosition + i * tableWidth / cols, yBottom);
//        }
//
//        for (int i = 0; i <= rows; i++)
//        {
//            tableContent.moveTo(xPosition, yPosition - i * rowHeight);
//            tableContent.lineTo(xPosition + tableWidth, yPosition - i * rowHeight);
//        }
//
//        tableContent.stroke();
//
//        float yTextPos = tableTopY - 15;
//        float xTextPos = xPosition + cellMargin;
//        for (int i = 0; i < columnas.length; i++)
//        {
//            tableContent.beginText();
//            tableContent.newLineAtOffset(xTextPos, yTextPos);
//            tableContent.showText(columnas[i]);
//            tableContent.endText();
//            xTextPos += columnWidths[i];
//        }
//
//        for (int i = 0; i < dtm.getRowCount(); i++)
//        {
//            yTextPos -= rowHeight;
//            xTextPos = xPosition + cellMargin;
//
//            for (int j = 0; j < dtm.getColumnCount(); j++)
//            {
//                tableContent.beginText();
//                tableContent.newLineAtOffset(xTextPos, yTextPos);
//                tableContent.showText(dtm.getValueAt(i, j).toString());
//                tableContent.endText();
//                xTextPos += columnWidths[j];
//            }
//        }
//
//        tableContent.close();
//        Mensaje.exito(this, "PDF Generado con exito");
//    }
    private Alumnos[] obtenerArregloAlumnos()
    {
        return Arrays.stream(VtnInicio.d)
                .filter(alumno -> alumno instanceof Alumnos)
                .map(alumno -> (Alumnos) alumno)
                .toArray(Alumnos[]::new);
    }

    public void mostrar()
    {
        for (int i = 0; i < VtnInicio.d.length; i++)
        {
            if (VtnInicio.d[i] instanceof Alumnos)
            {
                Alumnos alumno = (Alumnos) VtnInicio.d[i];
                Object[] rowData = obtenerDatosAlumno(alumno);
                dtm.addRow(rowData);
            }
        }
    }

    public void actualizarTabla()
    {
        dtm.setRowCount(0);
        mostrar();
    }

    private Object[] obtenerDatosAlumno(Alumnos alumno)
    {
        return new Object[]
        {
            alumno.getCve(),
            alumno.getNom(),
            alumno.getPrimerAp(),
            alumno.getSegundoAp(),
            alumno.getSexo(),
            convertirBooleanoASiNo(alumno.isDesnutricion()),
            convertirBooleanoASiNo(alumno.isSobrepeso()),
            convertirBooleanoASiNo(alumno.isAlergias()),
            convertirBooleanoASiNo(alumno.isObecidad()),
            convertirBooleanoASiNo(alumno.isDiabetes()),
            alumno.getOtras(),
            obtenerViveCon(alumno.getViveCon()),
            obtenerCarrera(alumno.getCarrera())
        };
    }

    private String convertirBooleanoASiNo(boolean valor)
    {
        return valor ? "Si" : "No";
    }

    private String obtenerViveCon(int opcion)
    {
        String s = "";
        switch (opcion)
        {
            case 0:
                return "Ambos padres";
            case 1:
                return "Solo papa";
            case 2:
                return "Solo mama";
            case 3:
                return "Otros";
        }
        return s;
    }

    private String obtenerCarrera(int opcion)
    {
        String s = "";
        switch (opcion)
        {
            case 0:
                return "Ing Software";
            case 1:
                return "Ing Plasticos";
            case 2:
                return "Ing Produccion Industrial";
            case 3:
                return "Ing Mecanica";
            case 4:
                return "Ing Computacion";
            case 5:
                return "Lic Seguridad Ciudadana";
        }
        return s;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(VtnConsultaAlum.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(VtnConsultaAlum.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(VtnConsultaAlum.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(VtnConsultaAlum.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new VtnConsultaAlum().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable desp;
    private javax.swing.JButton elimina;
    private javax.swing.JButton enfermedades;
    private javax.swing.JButton hym;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton ordena;
    private javax.swing.JButton pdf;
    // End of variables declaration//GEN-END:variables
}
